// src/pages/Cart.tsx
import React, { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { RootState } from '../store';
import { removeFromCart, clearCart } from '../slices/cartSlice';
import { addOrder } from '../slices/ordersSlice';
import { CartItem, Order, User } from '../types';
import supabase from '../supabaseClient';
import { mapSupabaseUserToAppUser } from '../utils';

const Cart: React.FC = () => {
  const dispatch = useDispatch();
  const cartItems = useSelector((state: RootState) => state.cart.items);
  const [user, setUser] = useState<User | null>(null);

  useEffect(() => {
    const fetchUser = async () => {
      const { data, error } = await supabase.auth.getUser();
      if (error) {
        console.error('Error fetching user:', error);
      } else if (data.user) {
        setUser(mapSupabaseUserToAppUser(data.user));
      }
    };
    fetchUser();
  }, []);

  const handleRemoveFromCart = (productId: string) => {
    dispatch(removeFromCart(productId));
  };

  const handleClearCart = () => {
    dispatch(clearCart());
  };

  const handleCheckout = async () => {
    if (!user) {
      alert('You need to log in to proceed with checkout.');
      return;
    }

    const newOrder: Order = {
      id: '', // This will be generated by Supabase
      userId: user.id,
      items: cartItems,
      createdAt: new Date().toISOString(),
    };

    const { data, error } = await supabase.from('orders').insert(newOrder);

    if (error) {
      console.error('Error creating order:', error);
    } else {
      dispatch(addOrder(newOrder));
      dispatch(clearCart());
      alert('Order placed successfully!');
    }
  };

  return (
    <div className="container mx-auto p-20">
      <h2 className="text-2xl font-bold mb-4 pt-10">Cart</h2>
      {cartItems.length > 0 ? (
        <div>
          <ul>
            {cartItems.map((item: CartItem) => (
              <li key={item.productId} className="flex justify-between items-center mb-2 p-2 border-b">
                <div>
                  <h3 className="font-semibold">{item.name}</h3>
                  <p>Quantity: {item.quantity}</p>
                </div>
                <button
                  className="ml-4 text-red-500 hover:text-red-700"
                  onClick={() => handleRemoveFromCart(item.productId)}
                >
                  Remove
                </button>
              </li>
            ))}
          </ul>
          <div className="mt-4">
            <button
              className="bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600"
              onClick={handleCheckout}
            >
              Checkout
            </button>
            <button
              className="bg-red-500 text-white py-2 px-4 rounded hover:bg-red-600 ml-2"
              onClick={handleClearCart}
            >
              Clear Cart
            </button>
          </div>
        </div>
      ) : (
        <p className="text-gray-700">Your cart is empty.</p>
      )}
    </div>
  );
};

export default Cart;





